services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  api:
    build:
      context: ../backend/server
      dockerfile: Dockerfile
    env_file:
      - ../backend/server/.env.production
    environment:
      NODE_ENV: production
      UPLOADS_DIR: /app/uploads
    volumes:
      - uploads:/app/uploads
    depends_on:
      db:     { condition: service_healthy }
      redis:  { condition: service_healthy }
    ports: []
    expose:
      - "3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }

  web:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    env_file:
      - ../frontend/.env.production
    ports: []
    expose:
      - "5173"
    depends_on:
      api: { condition: service_started }
    restart: unless-stopped
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }

  proxy:
    image: caddy:2-alpine
    depends_on:
      web: { condition: service_started }
      api: { condition: service_started }
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped

volumes:
  pgdata:
  uploads:
  caddy_data:
  caddy_config:
